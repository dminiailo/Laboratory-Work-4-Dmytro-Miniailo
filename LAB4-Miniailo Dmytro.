using System;
using System.IO;
using System.Net;
using System.Net.Security;
using System.Net.Sockets;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Threading.Tasks;

class Program
{
    static void Main(string[] args)
    {
        Console.WriteLine("Start as: 1) Server 2) Client");
        var choice = Console.ReadLine();

        if (choice == "1")
        {
            Task.Run(() => StartServer());
        }
        else if (choice == "2")
        {
            StartClient();
        }
    }

    static void StartServer()
    {
        const int port = 5000;
        var listener = new TcpListener(IPAddress.Any, port);
        listener.Start();
        Console.WriteLine("Server started. Waiting for clients...");

        while (true)
        {
            var client = listener.AcceptTcpClient();
            Console.WriteLine("Client connected.");
            Task.Run(() => HandleClient(client));
        }
    }

    static void HandleClient(TcpClient client)
    {
        using (var sslStream = new SslStream(client.GetStream(), false))
        {
            var serverCertificate = new X509Certificate2("server.pfx", "password");

            sslStream.AuthenticateAsServer(serverCertificate, false, false);
            Console.WriteLine("SSL authentication completed.");

            var reader = new StreamReader(sslStream, Encoding.UTF8);
            var writer = new StreamWriter(sslStream, Encoding.UTF8) { AutoFlush = true };

            try
            {
                while (true)
                {
                    var message = reader.ReadLine();
                    if (message == null)
                        break;

                    Console.WriteLine($"Received: {message}");
                    writer.WriteLine($"Echo: {message}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
            }
        }
    }

    static void StartClient()
    {
        const string serverIp = "127.0.0.1";
        const int port = 5000;

        using (var client = new TcpClient(serverIp, port))
        {
            Console.WriteLine("Connected to server.");

            using (var sslStream = new SslStream(client.GetStream(), false, new RemoteCertificateValidationCallback(ValidateServerCertificate)))
            {
                sslStream.AuthenticateAsClient("TestServer");
                Console.WriteLine("SSL authentication completed.");

                var reader = new StreamReader(sslStream, Encoding.UTF8);
                var writer = new StreamWriter(sslStream, Encoding.UTF8) { AutoFlush = true };

                while (true)
                {
                    Console.Write("Enter message: ");
                    var message = Console.ReadLine();
                    writer.WriteLine(message);

                    var response = reader.ReadLine();
                    Console.WriteLine($"Server response: {response}");
                }
            }
        }
    }

    static bool ValidateServerCertificate(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors)
    {
        if (sslPolicyErrors == SslPolicyErrors.None)
            return true;

        Console.WriteLine($"Certificate error: {sslPolicyErrors}");
        return false;
    }
}
